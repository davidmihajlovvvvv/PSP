Задача 1:
  Да се креира класа PC во која ќе се чуваат информации за модел, производител, RAM меморија
  во GB, капацитет на хард диск во GB, брзина на процесор во МHz и цена во евра. За оваа класа да
  се напише конструктор со 6 параметри кои одговараат на приватните променливи, copy
  конструктор, како и функција за печатење на сите карактеристики.
  Да се креира класа Kompanija која набавува персонални компјутери за која се чуваат
  информации за име, адреса, низа од персонални компјутери кои компанијата ги купува, како и
  број на компјутери кои што ги купила. За оваа класа да се обезбеди конструктор со 2 аргументи
  кои одговараат на приватните променливи име и адреса на компанијата, copy конструктор, како
  и функција за печатење на сите карактеристики на персоналните компјутери кои што
  компанијата ги купила. Да се напише функција dodadi(PC &pc) за додавање на објект од класата
  PC во низата компјутери откако компанијата ќе го купи компјутерот. Да се напише функција
  cenaKapacitet() која како резултат го враќа персоналниот компјутер кој има најмала цена и
  најголем капацитет на дискот (компјутерот со минимална вредност за односот цена/капацитет).
  Да се напише главна програма во која ќе се инстанцираат објекти од двете класи и ќе се
  повикаат функциите.

Задача 2:
  Да се напише класа за работа со низи од целобројни елементи. Класата ја има во себе низата
  која е динамички алоцирана и нејзината должина. Треба да се обезбедат следниве конструктори
  и методи за работа со низата:
    1. Default конструктор кој ќе алоцира низа со еден елемент и ќе го постави на нула.
    2. Конструктор кој како аргументи добива низа и должина на низата со кои треба да се
    постават низата од класата и нејзината должина.
    3. Конструктор кој како аргументи добива број на елементи кои треба да ги содржи низата и
    вредност со која ќе се исполни низата. Ако не се наведе вредност, низата да се исполни со
    нули.
    4. Copy конструктор кој соодветно ќе ја ископира низата со елементи од постоечки објект.
    5. Деструктор кој соодветно ќе ја избрише динамички алоцираната меморија.
    6. Функција dodadi(int *, int) која како аргументи добива низа од цели броеви и должина на
    низата. Функцијата треба да ја прилепи низата – аргумент на крајот од низата од класата.
    7. Функција odzemiPrvi(int) која како аргумент добива број на елементи кои треба да се
    одземат од почетокот на низата од класата.
    8. Функција odzemiPosledni(int) која како аргументи добива број на елементи кои треба да
    се одземат од крајот на низата од класата.
    9. Функција pechati() која ја печати низата.
  Напомена: Класата треба да се грижи за мемориско оптимизирање на низата!
